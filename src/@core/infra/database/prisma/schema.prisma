// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Users {
  id            Int             @id @default(autoincrement())
  firstName     String
  userName      String
  email         String          @unique
  password      String
  role          Roles           @relation(fields: [roleId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  roleId        Int
  createdAt     DateTime        @default(now())
  updatedAt     DateTime        @default(now())
  favorites     Favorites[]
  likesAnimes   LikesAnimes[]
  likesEpisodes LikesEpisodes[]
  watchList     WatchList[]
  comments      Comments[]

  @@map("users")
}

model Roles {
  id    Int     @id @default(autoincrement())
  name  String  @unique
  users Users[]

  @@map("roles")
}

model Animes {
  id                Int             @id @default(autoincrement())
  name              String
  synopsis          String
  thumbnailUrl      String
  feature           Boolean         @default(false)
  categories        Categories[]
  likes             LikesAnimes[]
  favorites         Favorites[]
  classifications   Classifications @relation(fields: [classificationsId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  classificationsId Int
  seasons           Seasons[]
  createdAt         DateTime        @default(now())
  updatedAt         DateTime        @default(now())

  @@map("animes")
}

model Categories {
  id     Int      @id @default(autoincrement())
  name   String   @unique
  animes Animes[]

  @@map("categories")
}

model Classifications {
  id     Int      @id @default(autoincrement())
  name   String   @unique
  desc   String
  animes Animes[]

  @@map("classifications")
}

model Favorites {
  id       Int    @id @default(autoincrement())
  user     Users  @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId   Int
  animes   Animes @relation(fields: [animesId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  animesId Int

  @@map("favorites")
}

model LikesAnimes {
  id       Int    @id @default(autoincrement())
  anime    Animes @relation(fields: [animesId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  animesId Int
  user     Users  @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId   Int

  @@map("likes-animes")
}

model Seasons {
  id       Int        @id @default(autoincrement())
  name     String
  order    Int        @unique
  anime    Animes     @relation(fields: [animeId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  animeId  Int
  episodes Episodes[]

  @@map("seasons")
}

model Episodes {
  id           Int             @id @default(autoincrement())
  name         String
  url          String
  episodeOrder Int             @unique
  seasons      Seasons         @relation(fields: [seasonsId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  seasonsId    Int
  likes        LikesEpisodes[]
  comments     Comments[]

  @@map("episodes")
}

model LikesEpisodes {
  id         Int      @id @default(autoincrement())
  user       Users    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId     Int
  episodes   Episodes @relation(fields: [episodesId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  episodesId Int

  @@map("likes-episodes")
}

model WatchList {
  id           Int      @id @default(autoincrement())
  anime        String
  thumbnailUrl String
  videoUrl     String
  episodeId    Int
  order        Int
  user         Users    @relation(fields: [userId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  userId       Int
  createdAt    DateTime @default(now())

  @@map("watchlist")
}

model Comments {
  id         Int      @id @default(autoincrement())
  text       String
  users      Users    @relation(fields: [usersId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  usersId    Int
  episodes   Episodes @relation(fields: [episodesId], references: [id], onDelete: Cascade, onUpdate: Cascade)
  episodesId Int
  createdAt  DateTime @default(now())
  updatedAt  DateTime @default(now())

  @@map("comments")
}
